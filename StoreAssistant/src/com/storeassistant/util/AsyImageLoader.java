package com.storeassistant.util;


import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Handler;
import android.os.Message;
import android.util.Log;


/** Êµï¿½ï¿½Í¼Æ¬ï¿½ï¿½ï¿½ì²½ï¿½ï¿½ï¿½ï¿½ ***/
public class AsyImageLoader {
	private Bitmap bitmap;
	private KuangUtils _ku=KuangUtils.getInstance();
	private Map<String, BitmapRef> imageCache = new HashMap<String, BitmapRef>();
	private ReferenceQueue<Bitmap> q=new ReferenceQueue<Bitmap>();//ï¿½ï¿½ï¿½Ã¶ï¿½ï¿½ï¿½
	private String fileName;
	public Bitmap loadDrawable(final String imageUrl,
			final ImageCallback callback,final int width,final int height,final float corner) {
		if (imageCache.containsKey(imageUrl)) {
			BitmapRef sr = imageCache.get(imageUrl);
			// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¼Æ¬Ã»ï¿½Ð±ï¿½ï¿½ï¿½ï¿½
			if (sr.get() != null) {return sr.get();}
		}
		// Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ØµÄ»ï¿½ï¿½ï¿½ï¿½Í´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
		final Handler handler = new Handler() {
		public void handleMessage(Message msg) {
		//ï¿½ï¿½Í¼Æ¬Ð´ï¿½ëµ½SDï¿½ï¿½
		fileName=imageUrl.substring(imageUrl.lastIndexOf("/")+1,imageUrl.length());
		if(_ku.enable==false){
		try {
			if(_ku.getImageFromSD(fileName)==null){
			//ï¿½ï¿½ï¿½ï¿½ï¿½Ø¸ï¿½ï¿½ï¿½ï¿½ï¿½,ï¿½Ë·ï¿½ï¿½ï¿½
			_ku.saveFile((Bitmap) msg.obj, fileName);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
		callback.imageloader((Bitmap) msg.obj,width,height,corner);
		}};
		new Thread() {
		public void run() {
		bitmap = loadImageFromUrl(imageUrl);
		cleanCache();//ï¿½ï¿½ï¿½Ã¶ï¿½ï¿½ï¿½ï¿½Ðµï¿½bitmapï¿½ï¿½Òªï¿½ï¿½,ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Õµï¿½,ï¿½È½ï¿½ï¿½ï¿½Ó¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ³ï¿?
		BitmapRef ref=new BitmapRef(bitmap, q, imageUrl);
		imageCache.put(imageUrl, new BitmapRef(bitmap, q, imageUrl));
		Message msg = handler.obtainMessage(0, bitmap);
		handler.sendMessage(msg);}}.start();
		return bitmap;
	}
	// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï»ï¿½È¡Í¼Æ¬
	public Bitmap loadImageFromUrl(String imageUrl) {
		Bitmap bitmap = null;

		try {
			URL url=new URL(imageUrl);
			InputStream is=url.openStream();
			/***ï¿½ï¿½ï¿½java.lang.OutOfMemoryError: bitmap size exceeds VM budget
			 * ï¿½ï¿½ï¿½ï¿½,Ê¹ï¿½Ã²ï¿½ï¿½ï¿½Öµ,ï¿½ï¿½ï¿½ï¿½Í¼Æ¬Ì«ï¿½ï¿½ï¿½ï¿½ï¿½Í¼Æ¬Ì«ï¿½ï¿½Ê¹ï¿½ï¿½BitmapFactoryï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
			 * ï¿½Ã´ï¿½ï¿½ï¿½,ï¿½Òµï¿½ï¿½ï¿½ï¿½ÊµÄ²ï¿½ï¿½ï¿½Öµ**/
			BitmapFactory.Options options=new BitmapFactory.Options();
		    options.inDither=false;    /*ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¼Æ¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½*/
		    options.inPreferredConfig=null;  /*ï¿½ï¿½ï¿½ï¿½ï¿½Ã½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ·ï¿½Ê½ï¿½ï¿½ï¿½ï¿?/
		    options.inSampleSize=3;          /*Í¼Æ¬ï¿½ï¿½ï¿?ï¿½ï¿½ï¿½ï¿½Ð¡ï¿½ï¿½ï¿½ï¿½*/
			bitmap = BitmapFactory.decodeStream(is,null,options);
		    is.close();
		} catch (Exception e) {}
		return bitmap;

	}
	

	// ï¿½Øµï¿½Ó¿ï¿?
	protected interface ImageCallback {
		public void imageloader(Bitmap imageDrawable,int width,int height,float corner);
	}
	
	private class BitmapRef extends SoftReference<Bitmap>{
		private String key="";
		//ï¿½ï¿½Ä¬ï¿½ÏµÄ¸ï¿½ï¿½à¹¹ï¿½ï¿½ï¿½ï¿½ï¿½Ð¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿?
		public BitmapRef(Bitmap r, ReferenceQueue<? super Bitmap> q,String key) {
			super(r, q);
			this.key=key;
		}	
	}
	
	/**
	 * method:ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã¶ï¿½ï¿½Ðµï¿½BitmapRefï¿½Æ³ï¿½<br>
	 * @return
	 */
	private void cleanCache() {
		// TODO Auto-generated method stub
		BitmapRef br=null;
		//ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½Ã¶ï¿½ï¿½ï¿½,q.poll()ï¿½ï¿½ï¿½Ð¿ï¿½ï¿½Ãµï¿½ï¿½ï¿½ï¿½Ã¶ï¿½ï¿½ï¿½,ï¿½ï¿½ï¿½ï¿½,ï¿½ï¿½ï¿½Ã¶ï¿½ï¿½ï¿½ï¿½ï¿½Îª,ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
		while((br=(BitmapRef)q.poll())!=null){
			imageCache.remove(br.key);
		}
	}
}
